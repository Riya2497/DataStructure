#include <iostream>
using namespace std;

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
};

Node* newNode(int val){
    Node* newnode = new Node;
    newnode->data = val;
    newnode->left = NULL;
    newnode->right = NULL;
    
    return newnode;
}

bool isIdentical(Node* root1, Node* root2){
    
    if(root1 == NULL &&  root2 == NULL) return true;
    
    if(root1 == NULL || root2 == NULL) return false;
    
    return (root1->data == root2->data && isIdentical(root1->left, root2->left) && isIdentical(root1->right, root2->right));
    
}
bool isSubTree(Node* T, Node* S){
    
    if(S == NULL) return true;
    
    if(T == NULL) return false;
    
    if(isIdentical(T,S)) return true;
    
    return (isSubTree(T->left, S) || isSubTree(T->right, S));
}
int main() {
    
    Node *T = newNode(26);  
    T->right         = newNode(3);  
    T->right->right = newNode(3);  
    T->left         = newNode(10);  
    T->left->left     = newNode(4);  
    T->left->left->right = newNode(30);  
    T->left->right     = newNode(6);  
  
    // TREE 2  
    /* Construct the following tree  
        10  
        / \  
    4 6  
    \  
        30  
    */
    Node *S = newNode(10);  
    S->right     = newNode(6);  
    S->left     = newNode(4);  
    S->left->right = newNode(30);  
  
  
    if (isSubTree(T, S))  
        cout << "Tree 2 is subtree of Tree 1";  
    else
        cout << "Tree 2 is not a subtree of Tree 1";  
  
    return 0;  
	cout<<"GfG!";
	return 0;
}
